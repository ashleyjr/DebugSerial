
TestHardware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000400  00800100  000001c4  00000258  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001c4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800500  00800500  00000658  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000658  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000688  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000225  00000000  00000000  000006d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000017a  00000000  00000000  000008f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001ac  00000000  00000000  00000a6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000098  00000000  00000000  00000c1c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001cb  00000000  00000000  00000cb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000135  00000000  00000000  00000e7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00000fb4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__vector_13>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d0 e1       	ldi	r29, 0x10	; 16
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	15 e0       	ldi	r17, 0x05	; 5
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	e4 ec       	ldi	r30, 0xC4	; 196
  90:	f1 e0       	ldi	r31, 0x01	; 1
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a0 30       	cpi	r26, 0x00	; 0
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	25 e0       	ldi	r18, 0x05	; 5
  a0:	a0 e0       	ldi	r26, 0x00	; 0
  a2:	b5 e0       	ldi	r27, 0x05	; 5
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	a1 30       	cpi	r26, 0x01	; 1
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 b4 00 	call	0x168	; 0x168 <main>
  b2:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <__vector_13>:
#include "Waveforms.h"
	
uint8_t speed;

ISR(TIMER1_COMPA_vect)
{
  ba:	1f 92       	push	r1
  bc:	0f 92       	push	r0
  be:	0f b6       	in	r0, 0x3f	; 63
  c0:	0f 92       	push	r0
  c2:	11 24       	eor	r1, r1
  c4:	2f 93       	push	r18
  c6:	8f 93       	push	r24
  c8:	9f 93       	push	r25
  ca:	ef 93       	push	r30
  cc:	ff 93       	push	r31
	uint16_t reading;
	ADMUX = 0;//(ADMUX & 0xF8)|0;     // clears the bottom 3 bits before ORing
  ce:	10 92 7c 00 	sts	0x007C, r1
	ADCSRA |= (1<<ADSC);
  d2:	ea e7       	ldi	r30, 0x7A	; 122
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	80 64       	ori	r24, 0x40	; 64
  da:	80 83       	st	Z, r24
	while(ADCSRA & (1<<ADSC));
  dc:	80 81       	ld	r24, Z
  de:	86 fd       	sbrc	r24, 6
  e0:	fd cf       	rjmp	.-6      	; 0xdc <__vector_13+0x22>
	reading = (ADCH << 8)|ADC;//(ADCH << 8)|(ADCL);
  e2:	20 91 79 00 	lds	r18, 0x0079
  e6:	80 91 78 00 	lds	r24, 0x0078
  ea:	90 91 79 00 	lds	r25, 0x0079
  ee:	92 2b       	or	r25, r18
	reading = reading >> 2;
  f0:	96 95       	lsr	r25
  f2:	87 95       	ror	r24
  f4:	96 95       	lsr	r25
  f6:	87 95       	ror	r24
	speed = (uint8_t)reading;
  f8:	80 93 00 05 	sts	0x0500, r24
}
  fc:	ff 91       	pop	r31
  fe:	ef 91       	pop	r30
 100:	9f 91       	pop	r25
 102:	8f 91       	pop	r24
 104:	2f 91       	pop	r18
 106:	0f 90       	pop	r0
 108:	0f be       	out	0x3f, r0	; 63
 10a:	0f 90       	pop	r0
 10c:	1f 90       	pop	r1
 10e:	18 95       	reti

00000110 <initAdc>:

void initAdc(){
	ADMUX = (1<<REFS0);
 110:	80 e4       	ldi	r24, 0x40	; 64
 112:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
 116:	87 e8       	ldi	r24, 0x87	; 135
 118:	80 93 7a 00 	sts	0x007A, r24
 11c:	08 95       	ret

0000011e <initTimer>:
}

void initTimer()
{
	cli();             // disable global interrupts
 11e:	f8 94       	cli
	TIMSK1 = (1 << OCIE1A);
 120:	82 e0       	ldi	r24, 0x02	; 2
 122:	80 93 6f 00 	sts	0x006F, r24
	TCCR1B = (1<<CS10);
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	80 93 81 00 	sts	0x0081, r24
	OCR1A = 100;
 12c:	84 e6       	ldi	r24, 0x64	; 100
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	90 93 89 00 	sts	0x0089, r25
 134:	80 93 88 00 	sts	0x0088, r24
	sei();
 138:	78 94       	sei
 13a:	08 95       	ret

0000013c <initUart>:
}

void initUart(void) { 
	UBRR1H = UBRRH_VALUE; UBRR1L = UBRRL_VALUE;
 13c:	10 92 cd 00 	sts	0x00CD, r1
 140:	8a e0       	ldi	r24, 0x0A	; 10
 142:	80 93 cc 00 	sts	0x00CC, r24
	UCSR1A = USE_2X << U2X1;
 146:	10 92 c8 00 	sts	0x00C8, r1
	UCSR1B = _BV(RXEN1) | _BV(TXEN1);
 14a:	88 e1       	ldi	r24, 0x18	; 24
 14c:	80 93 c9 00 	sts	0x00C9, r24
	UCSR1C = _BV(UCSZ10) | _BV(UCSZ11); 
 150:	86 e0       	ldi	r24, 0x06	; 6
 152:	80 93 ca 00 	sts	0x00CA, r24
 156:	08 95       	ret

00000158 <txUart>:
}

void txUart(uint8_t b) { 
	while(!(UCSR1A & _BV(UDRE1))); UDR1 = b;
 158:	e8 ec       	ldi	r30, 0xC8	; 200
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	90 81       	ld	r25, Z
 15e:	95 ff       	sbrs	r25, 5
 160:	fd cf       	rjmp	.-6      	; 0x15c <txUart+0x4>
 162:	80 93 ce 00 	sts	0x00CE, r24
 166:	08 95       	ret

00000168 <main>:
}

int main(void){
	uint16_t i,j = 0;
	initUart();
 168:	0e 94 9e 00 	call	0x13c	; 0x13c <initUart>
	initAdc();
 16c:	0e 94 88 00 	call	0x110	; 0x110 <initAdc>
	initTimer();
 170:	0e 94 8f 00 	call	0x11e	; 0x11e <initTimer>
void txUart(uint8_t b) { 
	while(!(UCSR1A & _BV(UDRE1))); UDR1 = b;
}

int main(void){
	uint16_t i,j = 0;
 174:	c0 e0       	ldi	r28, 0x00	; 0
 176:	d0 e0       	ldi	r29, 0x00	; 0
	initUart();
	initAdc();
	initTimer();
    while(1){
		for(i=0;i<speed;i++){
 178:	00 e0       	ldi	r16, 0x00	; 0
 17a:	10 e0       	ldi	r17, 0x00	; 0
 17c:	02 c0       	rjmp	.+4      	; 0x182 <main+0x1a>
			_delay_ms(1);
		}
		txUart(sine[j]);
		if(j == 1024){
			j = 0;
 17e:	c0 2f       	mov	r28, r16
 180:	d1 2f       	mov	r29, r17
	uint16_t i,j = 0;
	initUart();
	initAdc();
	initTimer();
    while(1){
		for(i=0;i<speed;i++){
 182:	80 91 00 05 	lds	r24, 0x0500
 186:	88 23       	and	r24, r24
 188:	79 f0       	breq	.+30     	; 0x1a8 <main+0x40>
 18a:	80 2f       	mov	r24, r16
 18c:	91 2f       	mov	r25, r17
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 18e:	e7 e8       	ldi	r30, 0x87	; 135
 190:	f3 e1       	ldi	r31, 0x13	; 19
 192:	31 97       	sbiw	r30, 0x01	; 1
 194:	f1 f7       	brne	.-4      	; 0x192 <main+0x2a>
 196:	00 c0       	rjmp	.+0      	; 0x198 <main+0x30>
 198:	00 00       	nop
 19a:	01 96       	adiw	r24, 0x01	; 1
 19c:	20 91 00 05 	lds	r18, 0x0500
 1a0:	30 e0       	ldi	r19, 0x00	; 0
 1a2:	82 17       	cp	r24, r18
 1a4:	93 07       	cpc	r25, r19
 1a6:	98 f3       	brcs	.-26     	; 0x18e <main+0x26>
			_delay_ms(1);
		}
		txUart(sine[j]);
 1a8:	fe 01       	movw	r30, r28
 1aa:	e0 50       	subi	r30, 0x00	; 0
 1ac:	ff 4f       	sbci	r31, 0xFF	; 255
 1ae:	80 81       	ld	r24, Z
 1b0:	0e 94 ac 00 	call	0x158	; 0x158 <txUart>
		if(j == 1024){
 1b4:	c1 15       	cp	r28, r1
 1b6:	f4 e0       	ldi	r31, 0x04	; 4
 1b8:	df 07       	cpc	r29, r31
 1ba:	09 f3       	breq	.-62     	; 0x17e <main+0x16>
			j = 0;
		}else{
			j++;	
 1bc:	21 96       	adiw	r28, 0x01	; 1
 1be:	e1 cf       	rjmp	.-62     	; 0x182 <main+0x1a>

000001c0 <_exit>:
 1c0:	f8 94       	cli

000001c2 <__stop_program>:
 1c2:	ff cf       	rjmp	.-2      	; 0x1c2 <__stop_program>
