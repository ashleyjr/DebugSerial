
DistanceSensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000000d0  00000144  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000d0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000144  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000038  00000000  00000000  00000174  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000000f5  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000d0  00000000  00000000  000002a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000000fc  00000000  00000000  00000371  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000054  00000000  00000000  00000470  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000014d  00000000  00000000  000004c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000028  00000000  00000000  00000611  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   8:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  10:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  14:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  18:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  1c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  20:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  24:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  28:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  2c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  30:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  34:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  38:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  3c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  40:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  44:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  48:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  4c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  50:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  54:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  58:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  5c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  60:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  64:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  68:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  6c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  70:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  74:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  78:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d0 e1       	ldi	r29, 0x10	; 16
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61
  88:	0e 94 60 00 	call	0xc0	; 0xc0 <main>
  8c:	0c 94 66 00 	jmp	0xcc	; 0xcc <_exit>

00000090 <__bad_interrupt>:
  90:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000094 <init_uart>:
#include <avr/io.h>
#define F_CPU 12000000UL
#define BAUD 57600
#include <util/setbaud.h>
void init_uart(void) { /* 8N1 */
	UBRR0H = UBRRH_VALUE; UBRR0L = UBRRL_VALUE;
  94:	10 92 c5 00 	sts	0x00C5, r1
  98:	8c e0       	ldi	r24, 0x0C	; 12
  9a:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0A = USE_2X << U2X0;
  9e:	10 92 c0 00 	sts	0x00C0, r1
	UCSR0B = _BV(RXEN0) | _BV(TXEN0);
  a2:	88 e1       	ldi	r24, 0x18	; 24
  a4:	80 93 c1 00 	sts	0x00C1, r24
UCSR0C = _BV(UCSZ00) | _BV(UCSZ01); }
  a8:	86 e0       	ldi	r24, 0x06	; 6
  aa:	80 93 c2 00 	sts	0x00C2, r24
  ae:	08 95       	ret

000000b0 <tx>:
void tx(uint8_t b) { while(!(UCSR0A & _BV(UDRE0))); UDR0 = b; }
  b0:	e0 ec       	ldi	r30, 0xC0	; 192
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	90 81       	ld	r25, Z
  b6:	95 ff       	sbrs	r25, 5
  b8:	fd cf       	rjmp	.-6      	; 0xb4 <tx+0x4>
  ba:	80 93 c6 00 	sts	0x00C6, r24
  be:	08 95       	ret

000000c0 <main>:
uint8_t rx(void) { while(!(UCSR0A & _BV(RXC0))); return UDR0; }
	
int main(void)
{
	init_uart();
  c0:	0e 94 4a 00 	call	0x94	; 0x94 <init_uart>
    while(1)
    {
		tx('A');
  c4:	81 e4       	ldi	r24, 0x41	; 65
  c6:	0e 94 58 00 	call	0xb0	; 0xb0 <tx>
  ca:	fc cf       	rjmp	.-8      	; 0xc4 <main+0x4>

000000cc <_exit>:
  cc:	f8 94       	cli

000000ce <__stop_program>:
  ce:	ff cf       	rjmp	.-2      	; 0xce <__stop_program>
